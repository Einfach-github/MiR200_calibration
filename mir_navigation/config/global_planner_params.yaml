base_global_planner: SBPLLatticePlanner
#base_global_planner: global_planner/GlobalPlanner
#base_global_planner: navfn/NavfnROS
#base_global_planner: carrot_planner/CarrotPlanner

GlobalPlanner:
  allow_unknown: true
  default_tolerance: 0.0
  visualize_potential: true # false
  #######Set parameters#############
  use_dijkstra: true  #1#true #If true, use dijkstra's algorithm. Otherwise, A*. 
  use_quadratic: true  #2#true #If true, use the quadratic approximation of the ##potential##. Otherwise, use a simpler calculation. 
  use_grid_path: false  #3#false #If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method. 
  #####################
  old_navfn_behavior: false #4#false #If for some reason, you want global_planner to exactly mirror the behavior of navfn, set this to true
  lethal_cost: 253
  neutral_cost: 66 #50
  cost_factor: 0.55 #3.0
  publish_potential: true
  orientation_mode: 0.0
  orientation_window_size: 1.0


SBPLLatticePlanner:
  environment_type: XYThetaLattice
  planner_type: ARAPlanner  #ADPlanner 
  allocated_time: 3.0   #The amount of time given to the planner to find a solution. 
  initial_epsilon: 8.0  #The larger this value is the faster the search tends to find a solution
  forward_search: false
  nominalvel_mpersecs: 0.4 
  timetoturn45degsinplace_secs: 0.3 # = 0.6 rad/s #Radius for Rotation


NavfnROS:
  allow_unknown: true
  planner_window_x: 0.0
  planner_window_y: 0.0
  default_tolerance: 0.0
  visualize_potential: true # false


CarrotPlanner:
  min_dist_from_robot: 0.10
  #step_size:  #(double, default: Resolution of the associated costmap)